// Generated by Dagger (https://dagger.dev).
package org.monora.uprotocol.client.android.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import org.monora.uprotocol.core.TransportSeat;
import org.monora.uprotocol.core.TransportSession;
import org.monora.uprotocol.core.persistence.PersistenceProvider;
import org.monora.uprotocol.core.protocol.ConnectionFactory;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class TransportSessionModule_ProvideTransportSessionFactory implements Factory<TransportSession> {
  private final TransportSessionModule module;

  private final Provider<ConnectionFactory> connectionFactoryProvider;

  private final Provider<PersistenceProvider> persistenceProvider;

  private final Provider<TransportSeat> transportSeatProvider;

  public TransportSessionModule_ProvideTransportSessionFactory(TransportSessionModule module,
      Provider<ConnectionFactory> connectionFactoryProvider,
      Provider<PersistenceProvider> persistenceProvider,
      Provider<TransportSeat> transportSeatProvider) {
    this.module = module;
    this.connectionFactoryProvider = connectionFactoryProvider;
    this.persistenceProvider = persistenceProvider;
    this.transportSeatProvider = transportSeatProvider;
  }

  @Override
  public TransportSession get() {
    return provideTransportSession(module, connectionFactoryProvider.get(), persistenceProvider.get(), transportSeatProvider.get());
  }

  public static TransportSessionModule_ProvideTransportSessionFactory create(
      TransportSessionModule module, Provider<ConnectionFactory> connectionFactoryProvider,
      Provider<PersistenceProvider> persistenceProvider,
      Provider<TransportSeat> transportSeatProvider) {
    return new TransportSessionModule_ProvideTransportSessionFactory(module, connectionFactoryProvider, persistenceProvider, transportSeatProvider);
  }

  public static TransportSession provideTransportSession(TransportSessionModule instance,
      ConnectionFactory connectionFactory, PersistenceProvider persistenceProvider,
      TransportSeat transportSeat) {
    return Preconditions.checkNotNullFromProvides(instance.provideTransportSession(connectionFactory, persistenceProvider, transportSeat));
  }
}
