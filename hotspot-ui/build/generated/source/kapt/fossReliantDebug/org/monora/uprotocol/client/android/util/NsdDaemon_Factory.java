// Generated by Dagger (https://dagger.dev).
package org.monora.uprotocol.client.android.util;

import android.content.Context;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import org.monora.uprotocol.client.android.backend.Backend;
import org.monora.uprotocol.core.persistence.PersistenceProvider;
import org.monora.uprotocol.core.protocol.ConnectionFactory;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NsdDaemon_Factory implements Factory<NsdDaemon> {
  private final Provider<Context> contextProvider;

  private final Provider<PersistenceProvider> persistenceProvider;

  private final Provider<ConnectionFactory> connectionFactoryProvider;

  private final Provider<Backend> backendProvider;

  public NsdDaemon_Factory(Provider<Context> contextProvider,
      Provider<PersistenceProvider> persistenceProvider,
      Provider<ConnectionFactory> connectionFactoryProvider, Provider<Backend> backendProvider) {
    this.contextProvider = contextProvider;
    this.persistenceProvider = persistenceProvider;
    this.connectionFactoryProvider = connectionFactoryProvider;
    this.backendProvider = backendProvider;
  }

  @Override
  public NsdDaemon get() {
    return newInstance(contextProvider.get(), persistenceProvider.get(), connectionFactoryProvider.get(), backendProvider.get());
  }

  public static NsdDaemon_Factory create(Provider<Context> contextProvider,
      Provider<PersistenceProvider> persistenceProvider,
      Provider<ConnectionFactory> connectionFactoryProvider, Provider<Backend> backendProvider) {
    return new NsdDaemon_Factory(contextProvider, persistenceProvider, connectionFactoryProvider, backendProvider);
  }

  public static NsdDaemon newInstance(Context context, PersistenceProvider persistenceProvider,
      ConnectionFactory connectionFactory, Backend backend) {
    return new NsdDaemon(context, persistenceProvider, connectionFactory, backend);
  }
}
