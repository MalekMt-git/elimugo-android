package org.monora.uprotocol.client.android.service.web;

import com.yanzhenjie.andserver.framework.cross.CrossOrigin;
import com.yanzhenjie.andserver.framework.handler.MappingAdapter;
import com.yanzhenjie.andserver.framework.handler.RequestHandler;
import com.yanzhenjie.andserver.framework.mapping.Addition;
import com.yanzhenjie.andserver.framework.mapping.Mapping;
import com.yanzhenjie.andserver.framework.mapping.Method;
import com.yanzhenjie.andserver.framework.mapping.Mime;
import com.yanzhenjie.andserver.framework.mapping.Path;
import java.lang.Override;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * This file was generated by AndServer automatically and you should NOT edit it.
 */
public final class SharingControllerAdapter extends MappingAdapter {
  private SharingController mHost;

  private Map<Mapping, RequestHandler> mMappingMap;

  public SharingControllerAdapter() {
    this.mHost = new SharingController();
    this.mMappingMap = new LinkedHashMap<>();

     {
      Mapping mapping = new Mapping();

      Path path = new Path();
      path.addRule("/download/{id}/{dummyName}");
      path.addRule("/download/{id}/{dummyName}/");
      mapping.setPath(path);

      Method method = new Method();
      method.addRule("GET");
      mapping.setMethod(method);

      Mime produce = new Mime();
      produce.addRule("application/force-download");
      mapping.setProduce(produce);

      Addition addition = new Addition();

      CrossOrigin crossOrigin = null;
      SharingControllerDownloadHandler handler = new SharingControllerDownloadHandler(mHost, mapping, addition, crossOrigin);
      mMappingMap.put(mapping, handler);
    }

     {
      Mapping mapping = new Mapping();

      Path path = new Path();
      path.addRule("/zip/{id}/{dummyName}");
      path.addRule("/zip/{id}/{dummyName}/");
      mapping.setPath(path);

      Method method = new Method();
      method.addRule("GET");
      mapping.setMethod(method);

      Mime produce = new Mime();
      produce.addRule("application/force-download");
      mapping.setProduce(produce);

      Addition addition = new Addition();

      CrossOrigin crossOrigin = null;
      SharingControllerDownloadZipHandler handler = new SharingControllerDownloadZipHandler(mHost, mapping, addition, crossOrigin);
      mMappingMap.put(mapping, handler);
    }

     {
      Mapping mapping = new Mapping();

      Path path = new Path();
      path.addRule("/thumbnail/{id}/");
      path.addRule("/thumbnail/{id}");
      mapping.setPath(path);

      Method method = new Method();
      method.addRule("GET");
      mapping.setMethod(method);

      Mime produce = new Mime();
      produce.addRule("image/png");
      mapping.setProduce(produce);

      Addition addition = new Addition();

      CrossOrigin crossOrigin = null;
      SharingControllerThumbnailHandler handler = new SharingControllerThumbnailHandler(mHost, mapping, addition, crossOrigin);
      mMappingMap.put(mapping, handler);
    }

     {
      Mapping mapping = new Mapping();

      Path path = new Path();
      path.addRule("/verify/");
      path.addRule("/verify");
      mapping.setPath(path);

      Method method = new Method();
      method.addRule("GET");
      mapping.setMethod(method);

      Mime produce = new Mime();
      produce.addRule("text/plain");
      mapping.setProduce(produce);

      Addition addition = new Addition();

      CrossOrigin crossOrigin = null;
      SharingControllerVerifyHandler handler = new SharingControllerVerifyHandler(mHost, mapping, addition, crossOrigin);
      mMappingMap.put(mapping, handler);
    }

     {
      Mapping mapping = new Mapping();

      Path path = new Path();
      path.addRule("/");
      mapping.setPath(path);

      Method method = new Method();
      method.addRule("GET");
      mapping.setMethod(method);

      Addition addition = new Addition();

      CrossOrigin crossOrigin = null;
      SharingControllerIndexHandler handler = new SharingControllerIndexHandler(mHost, mapping, addition, crossOrigin);
      mMappingMap.put(mapping, handler);
    }

     {
      Mapping mapping = new Mapping();

      Path path = new Path();
      path.addRule("/index.html");
      path.addRule("/index.html/");
      mapping.setPath(path);

      Method method = new Method();
      method.addRule("GET");
      mapping.setMethod(method);

      Mime produce = new Mime();
      produce.addRule("text/html");
      mapping.setProduce(produce);

      Addition addition = new Addition();

      CrossOrigin crossOrigin = null;
      SharingControllerIndexHandler1 handler = new SharingControllerIndexHandler1(mHost, mapping, addition, crossOrigin);
      mMappingMap.put(mapping, handler);
    }

     {
      Mapping mapping = new Mapping();

      Path path = new Path();
      path.addRule("/upload");
      path.addRule("/upload/");
      mapping.setPath(path);

      Method method = new Method();
      method.addRule("POST");
      mapping.setMethod(method);

      Addition addition = new Addition();

      CrossOrigin crossOrigin = null;
      SharingControllerUploadHandler handler = new SharingControllerUploadHandler(mHost, mapping, addition, crossOrigin);
      mMappingMap.put(mapping, handler);
    }
  }

  @Override
  protected Map<Mapping, RequestHandler> getMappingMap() {
    return mMappingMap;
  }

  @Override
  protected SharingController getHost() {
    return mHost;
  }
}
