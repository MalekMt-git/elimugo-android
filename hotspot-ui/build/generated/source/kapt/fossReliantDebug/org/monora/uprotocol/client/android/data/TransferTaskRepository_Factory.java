// Generated by Dagger (https://dagger.dev).
package org.monora.uprotocol.client.android.data;

import android.content.Context;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import org.monora.uprotocol.client.android.backend.Backend;
import org.monora.uprotocol.core.TransportSeat;
import org.monora.uprotocol.core.persistence.PersistenceProvider;
import org.monora.uprotocol.core.protocol.ConnectionFactory;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class TransferTaskRepository_Factory implements Factory<TransferTaskRepository> {
  private final Provider<Context> contextProvider;

  private final Provider<Backend> backendProvider;

  private final Provider<ClientRepository> clientRepositoryProvider;

  private final Provider<ConnectionFactory> connectionFactoryProvider;

  private final Provider<PersistenceProvider> persistenceProvider;

  private final Provider<TaskRepository> taskRepositoryProvider;

  private final Provider<TransferRepository> transferRepositoryProvider;

  private final Provider<TransportSeat> transportSeatProvider;

  public TransferTaskRepository_Factory(Provider<Context> contextProvider,
      Provider<Backend> backendProvider, Provider<ClientRepository> clientRepositoryProvider,
      Provider<ConnectionFactory> connectionFactoryProvider,
      Provider<PersistenceProvider> persistenceProvider,
      Provider<TaskRepository> taskRepositoryProvider,
      Provider<TransferRepository> transferRepositoryProvider,
      Provider<TransportSeat> transportSeatProvider) {
    this.contextProvider = contextProvider;
    this.backendProvider = backendProvider;
    this.clientRepositoryProvider = clientRepositoryProvider;
    this.connectionFactoryProvider = connectionFactoryProvider;
    this.persistenceProvider = persistenceProvider;
    this.taskRepositoryProvider = taskRepositoryProvider;
    this.transferRepositoryProvider = transferRepositoryProvider;
    this.transportSeatProvider = transportSeatProvider;
  }

  @Override
  public TransferTaskRepository get() {
    return newInstance(contextProvider.get(), backendProvider.get(), clientRepositoryProvider.get(), connectionFactoryProvider.get(), persistenceProvider.get(), taskRepositoryProvider.get(), transferRepositoryProvider.get(), transportSeatProvider.get());
  }

  public static TransferTaskRepository_Factory create(Provider<Context> contextProvider,
      Provider<Backend> backendProvider, Provider<ClientRepository> clientRepositoryProvider,
      Provider<ConnectionFactory> connectionFactoryProvider,
      Provider<PersistenceProvider> persistenceProvider,
      Provider<TaskRepository> taskRepositoryProvider,
      Provider<TransferRepository> transferRepositoryProvider,
      Provider<TransportSeat> transportSeatProvider) {
    return new TransferTaskRepository_Factory(contextProvider, backendProvider, clientRepositoryProvider, connectionFactoryProvider, persistenceProvider, taskRepositoryProvider, transferRepositoryProvider, transportSeatProvider);
  }

  public static TransferTaskRepository newInstance(Context context, Backend backend,
      ClientRepository clientRepository, ConnectionFactory connectionFactory,
      PersistenceProvider persistenceProvider, TaskRepository taskRepository,
      TransferRepository transferRepository, TransportSeat transportSeat) {
    return new TransferTaskRepository(context, backend, clientRepository, connectionFactory, persistenceProvider, taskRepository, transferRepository, transportSeat);
  }
}
