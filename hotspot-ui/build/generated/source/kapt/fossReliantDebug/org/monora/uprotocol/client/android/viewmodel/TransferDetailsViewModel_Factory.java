// Generated by Dagger (https://dagger.dev).
package org.monora.uprotocol.client.android.viewmodel;

import dagger.internal.DaggerGenerated;
import javax.inject.Provider;
import org.monora.uprotocol.client.android.data.ClientRepository;
import org.monora.uprotocol.client.android.data.TaskRepository;
import org.monora.uprotocol.client.android.data.TransferRepository;
import org.monora.uprotocol.client.android.database.model.Transfer;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class TransferDetailsViewModel_Factory {
  private final Provider<ClientRepository> userRepositoryProvider;

  private final Provider<TaskRepository> taskRepositoryProvider;

  private final Provider<TransferRepository> transferRepositoryProvider;

  public TransferDetailsViewModel_Factory(Provider<ClientRepository> userRepositoryProvider,
      Provider<TaskRepository> taskRepositoryProvider,
      Provider<TransferRepository> transferRepositoryProvider) {
    this.userRepositoryProvider = userRepositoryProvider;
    this.taskRepositoryProvider = taskRepositoryProvider;
    this.transferRepositoryProvider = transferRepositoryProvider;
  }

  public TransferDetailsViewModel get(Transfer transfer) {
    return newInstance(userRepositoryProvider.get(), taskRepositoryProvider.get(), transferRepositoryProvider.get(), transfer);
  }

  public static TransferDetailsViewModel_Factory create(
      Provider<ClientRepository> userRepositoryProvider,
      Provider<TaskRepository> taskRepositoryProvider,
      Provider<TransferRepository> transferRepositoryProvider) {
    return new TransferDetailsViewModel_Factory(userRepositoryProvider, taskRepositoryProvider, transferRepositoryProvider);
  }

  public static TransferDetailsViewModel newInstance(ClientRepository userRepository,
      TaskRepository taskRepository, TransferRepository transferRepository, Transfer transfer) {
    return new TransferDetailsViewModel(userRepository, taskRepository, transferRepository, transfer);
  }
}
