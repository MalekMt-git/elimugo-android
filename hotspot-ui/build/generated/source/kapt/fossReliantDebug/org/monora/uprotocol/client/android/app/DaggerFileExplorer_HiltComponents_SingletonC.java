// Generated by Dagger (https://dagger.dev).
package org.monora.uprotocol.client.android.app;

import android.app.Service;
import android.net.Uri;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.yanzhenjie.andserver.Server;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DelegateFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import org.monora.uprotocol.client.android.activity.ContentBrowserActivity;
import org.monora.uprotocol.client.android.activity.HomeActivity;
import org.monora.uprotocol.client.android.activity.IntroductionProfileFragment;
import org.monora.uprotocol.client.android.activity.PackageInstallerActivity;
import org.monora.uprotocol.client.android.activity.PackageInstallerActivity_MembersInjector;
import org.monora.uprotocol.client.android.activity.PackageInstallerViewModel;
import org.monora.uprotocol.client.android.activity.SharingActivity;
import org.monora.uprotocol.client.android.activity.WelcomeActivity;
import org.monora.uprotocol.client.android.backend.Backend;
import org.monora.uprotocol.client.android.backend.Services;
import org.monora.uprotocol.client.android.backend.TransportRegistry;
import org.monora.uprotocol.client.android.content.AppStore;
import org.monora.uprotocol.client.android.content.AudioStore;
import org.monora.uprotocol.client.android.content.ImageStore;
import org.monora.uprotocol.client.android.content.VideoStore;
import org.monora.uprotocol.client.android.data.ClientRepository;
import org.monora.uprotocol.client.android.data.ExtrasRepository;
import org.monora.uprotocol.client.android.data.FileRepository;
import org.monora.uprotocol.client.android.data.MediaRepository;
import org.monora.uprotocol.client.android.data.OnlineClientRepository;
import org.monora.uprotocol.client.android.data.SelectionRepository;
import org.monora.uprotocol.client.android.data.SharedTextRepository;
import org.monora.uprotocol.client.android.data.TaskRepository;
import org.monora.uprotocol.client.android.data.TransferRepository;
import org.monora.uprotocol.client.android.data.TransferTaskRepository;
import org.monora.uprotocol.client.android.data.UserDataRepository;
import org.monora.uprotocol.client.android.data.WebDataRepository;
import org.monora.uprotocol.client.android.database.AppDatabase;
import org.monora.uprotocol.client.android.database.ClientAddressDao;
import org.monora.uprotocol.client.android.database.ClientDao;
import org.monora.uprotocol.client.android.database.SafFolderDao;
import org.monora.uprotocol.client.android.database.SharedTextDao;
import org.monora.uprotocol.client.android.database.TransferDao;
import org.monora.uprotocol.client.android.database.TransferItemDao;
import org.monora.uprotocol.client.android.database.WebTransferDao;
import org.monora.uprotocol.client.android.database.model.Transfer;
import org.monora.uprotocol.client.android.database.model.UClient;
import org.monora.uprotocol.client.android.database.model.WebTransfer;
import org.monora.uprotocol.client.android.di.RoomModule;
import org.monora.uprotocol.client.android.di.RoomModule_ProvideClientAddressDaoFactory;
import org.monora.uprotocol.client.android.di.RoomModule_ProvideClientDaoFactory;
import org.monora.uprotocol.client.android.di.RoomModule_ProvideRoomDatabaseFactory;
import org.monora.uprotocol.client.android.di.RoomModule_ProvideSafFolderDaoFactory;
import org.monora.uprotocol.client.android.di.RoomModule_ProvideSharedTextDaoFactory;
import org.monora.uprotocol.client.android.di.RoomModule_ProvideTransferDaoFactory;
import org.monora.uprotocol.client.android.di.RoomModule_ProvideTransferItemDaoFactory;
import org.monora.uprotocol.client.android.di.RoomModule_ProvideWebTransferDaoFactory;
import org.monora.uprotocol.client.android.di.TransportSessionModule;
import org.monora.uprotocol.client.android.di.TransportSessionModule_ProvideTransportSessionFactory;
import org.monora.uprotocol.client.android.di.WebServerModule;
import org.monora.uprotocol.client.android.di.WebServerModule_ProvidesWebServerFactory;
import org.monora.uprotocol.client.android.fragment.ChangelogFragment;
import org.monora.uprotocol.client.android.fragment.ClientDetailsFragment;
import org.monora.uprotocol.client.android.fragment.ClientDetailsFragment_MembersInjector;
import org.monora.uprotocol.client.android.fragment.ClientDetailsViewModel;
import org.monora.uprotocol.client.android.fragment.ContentBrowserFragment;
import org.monora.uprotocol.client.android.fragment.ContentBrowserViewModel;
import org.monora.uprotocol.client.android.fragment.ContentBrowserViewModel_HiltModules_KeyModule_ProvideFactory;
import org.monora.uprotocol.client.android.fragment.CrashLogFragment;
import org.monora.uprotocol.client.android.fragment.FilePickerFragment;
import org.monora.uprotocol.client.android.fragment.ItemViewModel;
import org.monora.uprotocol.client.android.fragment.LicensesFragment;
import org.monora.uprotocol.client.android.fragment.ManageClientsFragment;
import org.monora.uprotocol.client.android.fragment.NetworkManagerFragment;
import org.monora.uprotocol.client.android.fragment.NetworkManagerFragment_MembersInjector;
import org.monora.uprotocol.client.android.fragment.PreparationViewModel;
import org.monora.uprotocol.client.android.fragment.PreparationViewModel_HiltModules_KeyModule_ProvideFactory;
import org.monora.uprotocol.client.android.fragment.PrepareSharingFragment;
import org.monora.uprotocol.client.android.fragment.ProfileEditorFragment;
import org.monora.uprotocol.client.android.fragment.ReceiveFragment;
import org.monora.uprotocol.client.android.fragment.ReceiverViewModel;
import org.monora.uprotocol.client.android.fragment.ReceiverViewModel_HiltModules_KeyModule_ProvideFactory;
import org.monora.uprotocol.client.android.fragment.SharingFragment;
import org.monora.uprotocol.client.android.fragment.SharingSelectionsViewModel;
import org.monora.uprotocol.client.android.fragment.SharingSelectionsViewModel_HiltModules_KeyModule_ProvideFactory;
import org.monora.uprotocol.client.android.fragment.TextEditorFragment;
import org.monora.uprotocol.client.android.fragment.TextEditorViewModel;
import org.monora.uprotocol.client.android.fragment.TextEditorViewModel_HiltModules_KeyModule_ProvideFactory;
import org.monora.uprotocol.client.android.fragment.TransferDetailsFragment;
import org.monora.uprotocol.client.android.fragment.TransferDetailsFragment_MembersInjector;
import org.monora.uprotocol.client.android.fragment.TransferHistoryFragment;
import org.monora.uprotocol.client.android.fragment.TransferItemFragment;
import org.monora.uprotocol.client.android.fragment.TransferItemFragment_MembersInjector;
import org.monora.uprotocol.client.android.fragment.WebTransferDetailsFragment;
import org.monora.uprotocol.client.android.fragment.WebTransferDetailsFragment_MembersInjector;
import org.monora.uprotocol.client.android.fragment.WebTransferDetailsViewModel;
import org.monora.uprotocol.client.android.fragment.content.AppBrowserFragment;
import org.monora.uprotocol.client.android.fragment.content.AppBrowserViewModel;
import org.monora.uprotocol.client.android.fragment.content.AppBrowserViewModel_HiltModules_KeyModule_ProvideFactory;
import org.monora.uprotocol.client.android.fragment.content.AudioBrowserFragment;
import org.monora.uprotocol.client.android.fragment.content.AudioBrowserViewModel;
import org.monora.uprotocol.client.android.fragment.content.AudioBrowserViewModel_HiltModules_KeyModule_ProvideFactory;
import org.monora.uprotocol.client.android.fragment.content.FileBrowserFragment;
import org.monora.uprotocol.client.android.fragment.content.ImageBrowserFragment;
import org.monora.uprotocol.client.android.fragment.content.ImageBrowserViewModel;
import org.monora.uprotocol.client.android.fragment.content.ImageBrowserViewModel_HiltModules_KeyModule_ProvideFactory;
import org.monora.uprotocol.client.android.fragment.content.SelectionsFragment;
import org.monora.uprotocol.client.android.fragment.content.VideoBrowserFragment;
import org.monora.uprotocol.client.android.fragment.content.VideoBrowserViewModel;
import org.monora.uprotocol.client.android.fragment.content.VideoBrowserViewModel_HiltModules_KeyModule_ProvideFactory;
import org.monora.uprotocol.client.android.fragment.content.transfer.PrepareIndexFragment;
import org.monora.uprotocol.client.android.fragment.content.transfer.PrepareIndexViewModel;
import org.monora.uprotocol.client.android.fragment.content.transfer.PrepareIndexViewModel_HiltModules_KeyModule_ProvideFactory;
import org.monora.uprotocol.client.android.fragment.content.transfer.WebShareLauncherFragment;
import org.monora.uprotocol.client.android.fragment.content.transfer.WebShareViewModel;
import org.monora.uprotocol.client.android.fragment.content.transfer.WebShareViewModel_HiltModules_KeyModule_ProvideFactory;
import org.monora.uprotocol.client.android.fragment.pickclient.AcceptClientFragment;
import org.monora.uprotocol.client.android.fragment.pickclient.BarcodeScannerFragment;
import org.monora.uprotocol.client.android.fragment.pickclient.BarcodeScannerViewModel;
import org.monora.uprotocol.client.android.fragment.pickclient.BarcodeScannerViewModel_HiltModules_KeyModule_ProvideFactory;
import org.monora.uprotocol.client.android.fragment.pickclient.ClientConnectionFragment;
import org.monora.uprotocol.client.android.fragment.pickclient.ConnectionOptionsFragment;
import org.monora.uprotocol.client.android.fragment.pickclient.ManualConnectionFragment;
import org.monora.uprotocol.client.android.fragment.pickclient.ManualConnectionViewModel;
import org.monora.uprotocol.client.android.fragment.pickclient.ManualConnectionViewModel_HiltModules_KeyModule_ProvideFactory;
import org.monora.uprotocol.client.android.fragment.pickclient.PickClientFragment;
import org.monora.uprotocol.client.android.protocol.MainConnectionFactory;
import org.monora.uprotocol.client.android.protocol.MainPersistenceProvider;
import org.monora.uprotocol.client.android.protocol.MainTransportSeat;
import org.monora.uprotocol.client.android.receiver.BgBroadcastReceiver;
import org.monora.uprotocol.client.android.receiver.BgBroadcastReceiver_MembersInjector;
import org.monora.uprotocol.client.android.service.BackgroundService;
import org.monora.uprotocol.client.android.service.BackgroundService_MembersInjector;
import org.monora.uprotocol.client.android.service.TogglingTileService;
import org.monora.uprotocol.client.android.service.TogglingTileService_MembersInjector;
import org.monora.uprotocol.client.android.util.NsdDaemon;
import org.monora.uprotocol.client.android.viewmodel.ChangelogViewModel;
import org.monora.uprotocol.client.android.viewmodel.ChangelogViewModel_HiltModules_KeyModule_ProvideFactory;
import org.monora.uprotocol.client.android.viewmodel.ClientConnectionViewModel;
import org.monora.uprotocol.client.android.viewmodel.ClientConnectionViewModel_HiltModules_KeyModule_ProvideFactory;
import org.monora.uprotocol.client.android.viewmodel.ClientPickerViewModel;
import org.monora.uprotocol.client.android.viewmodel.ClientPickerViewModel_HiltModules_KeyModule_ProvideFactory;
import org.monora.uprotocol.client.android.viewmodel.ClientsViewModel;
import org.monora.uprotocol.client.android.viewmodel.ClientsViewModel_HiltModules_KeyModule_ProvideFactory;
import org.monora.uprotocol.client.android.viewmodel.CrashLogViewModel;
import org.monora.uprotocol.client.android.viewmodel.CrashLogViewModel_HiltModules_KeyModule_ProvideFactory;
import org.monora.uprotocol.client.android.viewmodel.FilesViewModel;
import org.monora.uprotocol.client.android.viewmodel.FilesViewModel_HiltModules_KeyModule_ProvideFactory;
import org.monora.uprotocol.client.android.viewmodel.LicensesViewModel;
import org.monora.uprotocol.client.android.viewmodel.LicensesViewModel_HiltModules_KeyModule_ProvideFactory;
import org.monora.uprotocol.client.android.viewmodel.SharedTextsViewModel;
import org.monora.uprotocol.client.android.viewmodel.SharedTextsViewModel_HiltModules_KeyModule_ProvideFactory;
import org.monora.uprotocol.client.android.viewmodel.SharingSelectionViewModel;
import org.monora.uprotocol.client.android.viewmodel.SharingSelectionViewModel_HiltModules_KeyModule_ProvideFactory;
import org.monora.uprotocol.client.android.viewmodel.SharingViewModel;
import org.monora.uprotocol.client.android.viewmodel.SharingViewModel_HiltModules_KeyModule_ProvideFactory;
import org.monora.uprotocol.client.android.viewmodel.TransferDetailsViewModel;
import org.monora.uprotocol.client.android.viewmodel.TransferManagerViewModel;
import org.monora.uprotocol.client.android.viewmodel.TransferManagerViewModel_HiltModules_KeyModule_ProvideFactory;
import org.monora.uprotocol.client.android.viewmodel.TransfersViewModel;
import org.monora.uprotocol.client.android.viewmodel.TransfersViewModel_HiltModules_KeyModule_ProvideFactory;
import org.monora.uprotocol.client.android.viewmodel.UserProfileViewModel;
import org.monora.uprotocol.client.android.viewmodel.UserProfileViewModel_HiltModules_KeyModule_ProvideFactory;
import org.monora.uprotocol.core.TransportSeat;
import org.monora.uprotocol.core.TransportSession;
import org.monora.uprotocol.core.persistence.PersistenceProvider;
import org.monora.uprotocol.core.protocol.ConnectionFactory;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerFileExplorer_HiltComponents_SingletonC extends FileExplorer_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final TransportSessionModule transportSessionModule;

  private final DaggerFileExplorer_HiltComponents_SingletonC singletonC = this;

  private Provider<AppDatabase> provideRoomDatabaseProvider;

  private Provider<ClientRepository> clientRepositoryProvider;

  private Provider<UserDataRepository> userDataRepositoryProvider;

  private Provider<FileRepository> fileRepositoryProvider;

  private Provider<TransferRepository> transferRepositoryProvider;

  private Provider<MainPersistenceProvider> mainPersistenceProvider;

  private Provider<PersistenceProvider> providePersistenceProvider;

  private Provider<MainConnectionFactory> mainConnectionFactoryProvider;

  private Provider<ConnectionFactory> provideConnectionFactoryProvider;

  private Provider<Backend> backendProvider;

  private Provider<NsdDaemon> nsdDaemonProvider;

  private Provider<SharedTextRepository> sharedTextRepositoryProvider;

  private Provider<TaskRepository> taskRepositoryProvider;

  private Provider<TransportRegistry> transportRegistryProvider;

  private Provider<MainTransportSeat> mainTransportSeatProvider;

  private Provider<TransportSeat> provideTransportSeatProvider;

  private Provider<TransportSession> provideTransportSessionProvider;

  private Provider<WebDataRepository> webDataRepositoryProvider;

  private Provider<Server> providesWebServerProvider;

  private Provider<Services> servicesProvider;

  private Provider<TransferTaskRepository> transferTaskRepositoryProvider;

  private Provider<MediaRepository> mediaRepositoryProvider;

  private Provider<SelectionRepository> selectionRepositoryProvider;

  private Provider<ExtrasRepository> extrasRepositoryProvider;

  private Provider<OnlineClientRepository> onlineClientRepositoryProvider;

  private DaggerFileExplorer_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam,
      TransportSessionModule transportSessionModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
    this.transportSessionModule = transportSessionModuleParam;
    initialize(applicationContextModuleParam, transportSessionModuleParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  private AppDatabase appDatabase() {
    return RoomModule_ProvideRoomDatabaseFactory.provideRoomDatabase(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private ClientDao clientDao() {
    return RoomModule_ProvideClientDaoFactory.provideClientDao(provideRoomDatabaseProvider.get());
  }

  private ClientAddressDao clientAddressDao() {
    return RoomModule_ProvideClientAddressDaoFactory.provideClientAddressDao(provideRoomDatabaseProvider.get());
  }

  private ClientRepository clientRepository() {
    return new ClientRepository(clientDao(), clientAddressDao());
  }

  private UserDataRepository userDataRepository() {
    return new UserDataRepository(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private SafFolderDao safFolderDao() {
    return RoomModule_ProvideSafFolderDaoFactory.provideSafFolderDao(provideRoomDatabaseProvider.get());
  }

  private FileRepository fileRepository2() {
    return new FileRepository(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule), safFolderDao());
  }

  private TransferDao transferDao() {
    return RoomModule_ProvideTransferDaoFactory.provideTransferDao(provideRoomDatabaseProvider.get());
  }

  private TransferItemDao transferItemDao() {
    return RoomModule_ProvideTransferItemDaoFactory.provideTransferItemDao(provideRoomDatabaseProvider.get());
  }

  private TransferRepository transferRepository() {
    return new TransferRepository(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule), fileRepositoryProvider.get(), transferDao(), transferItemDao());
  }

  private MainPersistenceProvider mainPersistenceProvider() {
    return new MainPersistenceProvider(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule), clientRepositoryProvider.get(), userDataRepositoryProvider.get(), transferRepositoryProvider.get());
  }

  private MainConnectionFactory mainConnectionFactory() {
    return new MainConnectionFactory(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private NsdDaemon nsdDaemon() {
    return new NsdDaemon(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule), providePersistenceProvider.get(), provideConnectionFactoryProvider.get(), backendProvider.get());
  }

  private SharedTextDao sharedTextDao() {
    return RoomModule_ProvideSharedTextDaoFactory.provideSharedTextDao(provideRoomDatabaseProvider.get());
  }

  private SharedTextRepository sharedTextRepository() {
    return new SharedTextRepository(sharedTextDao());
  }

  private TaskRepository taskRepository() {
    return new TaskRepository(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule), backendProvider.get());
  }

  private TransportRegistry transportRegistry() {
    return new TransportRegistry(backendProvider.get());
  }

  private MainTransportSeat mainTransportSeat() {
    return new MainTransportSeat(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule), backendProvider.get(), fileRepositoryProvider.get(), providePersistenceProvider.get(), sharedTextRepositoryProvider.get(), taskRepositoryProvider.get(), transferRepositoryProvider.get(), transportRegistryProvider.get());
  }

  private TransportSession transportSession() {
    return TransportSessionModule_ProvideTransportSessionFactory.provideTransportSession(transportSessionModule, provideConnectionFactoryProvider.get(), providePersistenceProvider.get(), provideTransportSeatProvider.get());
  }

  private WebTransferDao webTransferDao() {
    return RoomModule_ProvideWebTransferDaoFactory.provideWebTransferDao(provideRoomDatabaseProvider.get());
  }

  private WebDataRepository webDataRepository2() {
    return new WebDataRepository(webTransferDao());
  }

  private Server webShareServerServer() {
    return WebServerModule_ProvidesWebServerFactory.providesWebServer(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private Services services2() {
    return new Services(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule), nsdDaemonProvider.get(), provideTransportSessionProvider.get(), webDataRepositoryProvider.get(), providesWebServerProvider.get());
  }

  private Backend backend() {
    return new Backend(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule), DoubleCheck.lazy(servicesProvider));
  }

  private TransferTaskRepository transferTaskRepository() {
    return new TransferTaskRepository(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule), backendProvider.get(), clientRepositoryProvider.get(), provideConnectionFactoryProvider.get(), providePersistenceProvider.get(), taskRepositoryProvider.get(), transferRepositoryProvider.get(), provideTransportSeatProvider.get());
  }

  private AppStore appStore() {
    return new AppStore(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private AudioStore audioStore() {
    return new AudioStore(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private ImageStore imageStore() {
    return new ImageStore(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private VideoStore videoStore() {
    return new VideoStore(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private MediaRepository mediaRepository() {
    return new MediaRepository(appStore(), audioStore(), imageStore(), videoStore());
  }

  private ExtrasRepository extrasRepository() {
    return new ExtrasRepository(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private OnlineClientRepository onlineClientRepository() {
    return new OnlineClientRepository(nsdDaemonProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ApplicationContextModule applicationContextModuleParam,
      final TransportSessionModule transportSessionModuleParam) {
    this.provideRoomDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<AppDatabase>(singletonC, 5));
    this.clientRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<ClientRepository>(singletonC, 4));
    this.userDataRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<UserDataRepository>(singletonC, 6));
    this.fileRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<FileRepository>(singletonC, 8));
    this.transferRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<TransferRepository>(singletonC, 7));
    this.mainPersistenceProvider = new SwitchingProvider<>(singletonC, 3);
    this.providePersistenceProvider = DoubleCheck.provider((Provider) mainPersistenceProvider);
    this.mainConnectionFactoryProvider = new SwitchingProvider<>(singletonC, 9);
    this.provideConnectionFactoryProvider = DoubleCheck.provider((Provider) mainConnectionFactoryProvider);
    this.backendProvider = new DelegateFactory<>();
    this.nsdDaemonProvider = DoubleCheck.provider(new SwitchingProvider<NsdDaemon>(singletonC, 2));
    this.sharedTextRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<SharedTextRepository>(singletonC, 12));
    this.taskRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<TaskRepository>(singletonC, 13));
    this.transportRegistryProvider = DoubleCheck.provider(new SwitchingProvider<TransportRegistry>(singletonC, 14));
    this.mainTransportSeatProvider = new SwitchingProvider<>(singletonC, 11);
    this.provideTransportSeatProvider = DoubleCheck.provider((Provider) mainTransportSeatProvider);
    this.provideTransportSessionProvider = DoubleCheck.provider(new SwitchingProvider<TransportSession>(singletonC, 10));
    this.webDataRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<WebDataRepository>(singletonC, 15));
    this.providesWebServerProvider = DoubleCheck.provider(new SwitchingProvider<Server>(singletonC, 16));
    this.servicesProvider = DoubleCheck.provider(new SwitchingProvider<Services>(singletonC, 1));
    DelegateFactory.setDelegate(backendProvider, DoubleCheck.provider(new SwitchingProvider<Backend>(singletonC, 0)));
    this.transferTaskRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<TransferTaskRepository>(singletonC, 17));
    this.mediaRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<MediaRepository>(singletonC, 18));
    this.selectionRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<SelectionRepository>(singletonC, 19));
    this.extrasRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<ExtrasRepository>(singletonC, 20));
    this.onlineClientRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<OnlineClientRepository>(singletonC, 21));
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  @Override
  public void injectFileExplorer(FileExplorer fileExplorer) {
  }

  @Override
  public void injectBgBroadcastReceiver(BgBroadcastReceiver bgBroadcastReceiver) {
    injectBgBroadcastReceiver2(bgBroadcastReceiver);
  }

  @Override
  public FileRepository fileRepository() {
    return fileRepositoryProvider.get();
  }

  @Override
  public Services services() {
    return servicesProvider.get();
  }

  @Override
  public WebDataRepository webDataRepository() {
    return webDataRepositoryProvider.get();
  }

  private BgBroadcastReceiver injectBgBroadcastReceiver2(BgBroadcastReceiver instance) {
    BgBroadcastReceiver_MembersInjector.injectBackend(instance, backendProvider.get());
    BgBroadcastReceiver_MembersInjector.injectClientRepository(instance, clientRepositoryProvider.get());
    BgBroadcastReceiver_MembersInjector.injectConnectionFactory(instance, provideConnectionFactoryProvider.get());
    BgBroadcastReceiver_MembersInjector.injectPersistenceProvider(instance, providePersistenceProvider.get());
    BgBroadcastReceiver_MembersInjector.injectTransferRepository(instance, transferRepositoryProvider.get());
    BgBroadcastReceiver_MembersInjector.injectTransferTaskRepository(instance, transferTaskRepositoryProvider.get());
    BgBroadcastReceiver_MembersInjector.injectTransportSeat(instance, provideTransportSeatProvider.get());
    return instance;
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private TransportSessionModule transportSessionModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder roomModule(RoomModule roomModule) {
      Preconditions.checkNotNull(roomModule);
      return this;
    }

    public Builder transportSessionModule(TransportSessionModule transportSessionModule) {
      this.transportSessionModule = Preconditions.checkNotNull(transportSessionModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder webServerModule(WebServerModule webServerModule) {
      Preconditions.checkNotNull(webServerModule);
      return this;
    }

    public FileExplorer_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (transportSessionModule == null) {
        this.transportSessionModule = new TransportSessionModule();
      }
      return new DaggerFileExplorer_HiltComponents_SingletonC(applicationContextModule, transportSessionModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements FileExplorer_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerFileExplorer_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(DaggerFileExplorer_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public FileExplorer_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityCBuilder implements FileExplorer_HiltComponents.ActivityC.Builder {
    private final DaggerFileExplorer_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private android.app.Activity activity;

    private ActivityCBuilder(DaggerFileExplorer_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(android.app.Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public FileExplorer_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, android.app.Activity.class);
      return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements FileExplorer_HiltComponents.FragmentC.Builder {
    private final DaggerFileExplorer_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(DaggerFileExplorer_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public FileExplorer_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements FileExplorer_HiltComponents.ViewWithFragmentC.Builder {
    private final DaggerFileExplorer_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(DaggerFileExplorer_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public FileExplorer_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements FileExplorer_HiltComponents.ViewC.Builder {
    private final DaggerFileExplorer_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(DaggerFileExplorer_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public FileExplorer_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonC, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements FileExplorer_HiltComponents.ViewModelC.Builder {
    private final DaggerFileExplorer_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(DaggerFileExplorer_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public FileExplorer_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements FileExplorer_HiltComponents.ServiceC.Builder {
    private final DaggerFileExplorer_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerFileExplorer_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public FileExplorer_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends FileExplorer_HiltComponents.ViewWithFragmentC {
    private final DaggerFileExplorer_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(DaggerFileExplorer_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends FileExplorer_HiltComponents.FragmentC {
    private final DaggerFileExplorer_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(DaggerFileExplorer_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    private ClientDetailsViewModel clientDetailsViewModel(UClient client) {
      return new ClientDetailsViewModel(singletonC.clientRepositoryProvider.get(), client);
    }

    private ClientDetailsViewModel.Factory clientDetailsViewModelFactory() {
      return new ClientDetailsViewModel.Factory() {
        @Override
        public ClientDetailsViewModel create(UClient client) {
          return fragmentCImpl.clientDetailsViewModel(client);
        }
      };
    }

    private TransferDetailsViewModel transferDetailsViewModel(Transfer transfer) {
      return new TransferDetailsViewModel(singletonC.clientRepositoryProvider.get(), singletonC.taskRepositoryProvider.get(), singletonC.transferRepositoryProvider.get(), transfer);
    }

    private TransferDetailsViewModel.Factory transferDetailsViewModelFactory() {
      return new TransferDetailsViewModel.Factory() {
        @Override
        public TransferDetailsViewModel create(Transfer transfer) {
          return fragmentCImpl.transferDetailsViewModel(transfer);
        }
      };
    }

    private ItemViewModel itemViewModel(Transfer transfer2) {
      return new ItemViewModel(singletonC.transferRepositoryProvider.get(), transfer2);
    }

    private ItemViewModel.Factory itemViewModelFactory() {
      return new ItemViewModel.Factory() {
        @Override
        public ItemViewModel create(Transfer transfer) {
          return fragmentCImpl.itemViewModel(transfer);
        }
      };
    }

    private WebTransferDetailsViewModel webTransferDetailsViewModel(WebTransfer transfer3) {
      return new WebTransferDetailsViewModel(ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule), singletonC.webDataRepositoryProvider.get(), transfer3);
    }

    private WebTransferDetailsViewModel.Factory webTransferDetailsViewModelFactory() {
      return new WebTransferDetailsViewModel.Factory() {
        @Override
        public WebTransferDetailsViewModel create(WebTransfer transfer) {
          return fragmentCImpl.webTransferDetailsViewModel(transfer);
        }
      };
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }

    @Override
    public void injectIntroductionProfileFragment(
        IntroductionProfileFragment introductionProfileFragment) {
    }

    @Override
    public void injectChangelogFragment(ChangelogFragment changelogFragment) {
    }

    @Override
    public void injectClientDetailsFragment(ClientDetailsFragment clientDetailsFragment) {
      injectClientDetailsFragment2(clientDetailsFragment);
    }

    @Override
    public void injectContentBrowserFragment(ContentBrowserFragment contentBrowserFragment) {
    }

    @Override
    public void injectCrashLogFragment(CrashLogFragment crashLogFragment) {
    }

    @Override
    public void injectFilePickerFragment(FilePickerFragment filePickerFragment) {
    }

    @Override
    public void injectLicensesFragment(LicensesFragment licensesFragment) {
    }

    @Override
    public void injectManageClientsFragment(ManageClientsFragment manageClientsFragment) {
    }

    @Override
    public void injectNetworkManagerFragment(NetworkManagerFragment networkManagerFragment) {
      injectNetworkManagerFragment2(networkManagerFragment);
    }

    @Override
    public void injectPrepareSharingFragment(PrepareSharingFragment prepareSharingFragment) {
    }

    @Override
    public void injectProfileEditorFragment(ProfileEditorFragment profileEditorFragment) {
    }

    @Override
    public void injectReceiveFragment(ReceiveFragment receiveFragment) {
    }

    @Override
    public void injectSharingFragment(SharingFragment sharingFragment) {
    }

    @Override
    public void injectTextEditorFragment(TextEditorFragment textEditorFragment) {
    }

    @Override
    public void injectTransferDetailsFragment(TransferDetailsFragment transferDetailsFragment) {
      injectTransferDetailsFragment2(transferDetailsFragment);
    }

    @Override
    public void injectTransferHistoryFragment(TransferHistoryFragment transferHistoryFragment) {
    }

    @Override
    public void injectTransferItemFragment(TransferItemFragment transferItemFragment) {
      injectTransferItemFragment2(transferItemFragment);
    }

    @Override
    public void injectWebTransferDetailsFragment(
        WebTransferDetailsFragment webTransferDetailsFragment) {
      injectWebTransferDetailsFragment2(webTransferDetailsFragment);
    }

    @Override
    public void injectAppBrowserFragment(AppBrowserFragment appBrowserFragment) {
    }

    @Override
    public void injectAudioBrowserFragment(AudioBrowserFragment audioBrowserFragment) {
    }

    @Override
    public void injectFileBrowserFragment(FileBrowserFragment fileBrowserFragment) {
    }

    @Override
    public void injectImageBrowserFragment(ImageBrowserFragment imageBrowserFragment) {
    }

    @Override
    public void injectSelectionsFragment(SelectionsFragment selectionsFragment) {
    }

    @Override
    public void injectVideoBrowserFragment(VideoBrowserFragment videoBrowserFragment) {
    }

    @Override
    public void injectPrepareIndexFragment(PrepareIndexFragment prepareIndexFragment) {
    }

    @Override
    public void injectWebShareLauncherFragment(WebShareLauncherFragment webShareLauncherFragment) {
    }

    @Override
    public void injectAcceptClientFragment(AcceptClientFragment acceptClientFragment) {
    }

    @Override
    public void injectBarcodeScannerFragment(BarcodeScannerFragment barcodeScannerFragment) {
    }

    @Override
    public void injectClientConnectionFragment(ClientConnectionFragment clientConnectionFragment) {
    }

    @Override
    public void injectConnectionOptionsFragment(
        ConnectionOptionsFragment connectionOptionsFragment) {
    }

    @Override
    public void injectManualConnectionFragment(ManualConnectionFragment manualConnectionFragment) {
    }

    @Override
    public void injectPickClientFragment(PickClientFragment pickClientFragment) {
    }

    private ClientDetailsFragment injectClientDetailsFragment2(ClientDetailsFragment instance) {
      ClientDetailsFragment_MembersInjector.injectFactory(instance, clientDetailsViewModelFactory());
      return instance;
    }

    private NetworkManagerFragment injectNetworkManagerFragment2(NetworkManagerFragment instance) {
      NetworkManagerFragment_MembersInjector.injectBackend(instance, singletonC.backendProvider.get());
      NetworkManagerFragment_MembersInjector.injectPersistenceProvider(instance, singletonC.providePersistenceProvider.get());
      return instance;
    }

    private TransferDetailsFragment injectTransferDetailsFragment2(
        TransferDetailsFragment instance) {
      TransferDetailsFragment_MembersInjector.injectFactory(instance, transferDetailsViewModelFactory());
      return instance;
    }

    private TransferItemFragment injectTransferItemFragment2(TransferItemFragment instance) {
      TransferItemFragment_MembersInjector.injectFactory(instance, itemViewModelFactory());
      return instance;
    }

    private WebTransferDetailsFragment injectWebTransferDetailsFragment2(
        WebTransferDetailsFragment instance) {
      WebTransferDetailsFragment_MembersInjector.injectFactory(instance, webTransferDetailsViewModelFactory());
      return instance;
    }
  }

  private static final class ViewCImpl extends FileExplorer_HiltComponents.ViewC {
    private final DaggerFileExplorer_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(DaggerFileExplorer_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends FileExplorer_HiltComponents.ActivityC {
    private final DaggerFileExplorer_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(DaggerFileExplorer_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, android.app.Activity activityParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    private PackageInstallerViewModel packageInstallerViewModel(Uri uri) {
      return new PackageInstallerViewModel(ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule), uri);
    }

    private PackageInstallerViewModel.Factory packageInstallerViewModelFactory() {
      return new PackageInstallerViewModel.Factory() {
        @Override
        public PackageInstallerViewModel create(Uri uri) {
          return activityCImpl.packageInstallerViewModel(uri);
        }
      };
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(26).add(AppBrowserViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(AudioBrowserViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(BarcodeScannerViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ChangelogViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ClientConnectionViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ClientPickerViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ClientsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ContentBrowserViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(CrashLogViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(FilesViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ImageBrowserViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(LicensesViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ManualConnectionViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(PreparationViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(PrepareIndexViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ReceiverViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SharedTextsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SharingSelectionViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SharingSelectionsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SharingViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(TextEditorViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(TransferManagerViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(TransfersViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(UserProfileViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(VideoBrowserViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(WebShareViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public void injectContentBrowserActivity(ContentBrowserActivity contentBrowserActivity) {
      injectContentBrowserActivity2(contentBrowserActivity);
    }

    @Override
    public void injectHomeActivity(HomeActivity homeActivity) {
      injectHomeActivity2(homeActivity);
    }

    @Override
    public void injectPackageInstallerActivity(PackageInstallerActivity packageInstallerActivity) {
      injectPackageInstallerActivity2(packageInstallerActivity);
    }

    @Override
    public void injectSharingActivity(SharingActivity sharingActivity) {
      injectSharingActivity2(sharingActivity);
    }

    @Override
    public void injectWelcomeActivity(WelcomeActivity welcomeActivity) {
      injectWelcomeActivity2(welcomeActivity);
    }

    @Override
    public void injectActivity(Activity activity) {
      injectActivity2(activity);
    }

    @Override
    public Backend backend() {
      return singletonC.backendProvider.get();
    }

    @Override
    public ClientRepository clientRepository() {
      return singletonC.clientRepositoryProvider.get();
    }

    private ContentBrowserActivity injectContentBrowserActivity2(ContentBrowserActivity instance) {
      Activity_MembersInjector.injectBackend(instance, singletonC.backendProvider.get());
      Activity_MembersInjector.injectSharedTextRepository(instance, singletonC.sharedTextRepositoryProvider.get());
      return instance;
    }

    private HomeActivity injectHomeActivity2(HomeActivity instance) {
      Activity_MembersInjector.injectBackend(instance, singletonC.backendProvider.get());
      Activity_MembersInjector.injectSharedTextRepository(instance, singletonC.sharedTextRepositoryProvider.get());
      return instance;
    }

    private PackageInstallerActivity injectPackageInstallerActivity2(
        PackageInstallerActivity instance) {
      Activity_MembersInjector.injectBackend(instance, singletonC.backendProvider.get());
      Activity_MembersInjector.injectSharedTextRepository(instance, singletonC.sharedTextRepositoryProvider.get());
      PackageInstallerActivity_MembersInjector.injectFactory(instance, packageInstallerViewModelFactory());
      return instance;
    }

    private SharingActivity injectSharingActivity2(SharingActivity instance) {
      Activity_MembersInjector.injectBackend(instance, singletonC.backendProvider.get());
      Activity_MembersInjector.injectSharedTextRepository(instance, singletonC.sharedTextRepositoryProvider.get());
      return instance;
    }

    private WelcomeActivity injectWelcomeActivity2(WelcomeActivity instance) {
      Activity_MembersInjector.injectBackend(instance, singletonC.backendProvider.get());
      Activity_MembersInjector.injectSharedTextRepository(instance, singletonC.sharedTextRepositoryProvider.get());
      return instance;
    }

    private Activity injectActivity2(Activity instance) {
      Activity_MembersInjector.injectBackend(instance, singletonC.backendProvider.get());
      Activity_MembersInjector.injectSharedTextRepository(instance, singletonC.sharedTextRepositoryProvider.get());
      return instance;
    }
  }

  private static final class ViewModelCImpl extends FileExplorer_HiltComponents.ViewModelC {
    private final DaggerFileExplorer_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<AppBrowserViewModel> appBrowserViewModelProvider;

    private Provider<AudioBrowserViewModel> audioBrowserViewModelProvider;

    private Provider<BarcodeScannerViewModel> barcodeScannerViewModelProvider;

    private Provider<ChangelogViewModel> changelogViewModelProvider;

    private Provider<ClientConnectionViewModel> clientConnectionViewModelProvider;

    private Provider<ClientPickerViewModel> clientPickerViewModelProvider;

    private Provider<ClientsViewModel> clientsViewModelProvider;

    private Provider<ContentBrowserViewModel> contentBrowserViewModelProvider;

    private Provider<CrashLogViewModel> crashLogViewModelProvider;

    private Provider<FilesViewModel> filesViewModelProvider;

    private Provider<ImageBrowserViewModel> imageBrowserViewModelProvider;

    private Provider<LicensesViewModel> licensesViewModelProvider;

    private Provider<ManualConnectionViewModel> manualConnectionViewModelProvider;

    private Provider<PreparationViewModel> preparationViewModelProvider;

    private Provider<PrepareIndexViewModel> prepareIndexViewModelProvider;

    private Provider<ReceiverViewModel> receiverViewModelProvider;

    private Provider<SharedTextsViewModel> sharedTextsViewModelProvider;

    private Provider<SharingSelectionViewModel> sharingSelectionViewModelProvider;

    private Provider<SharingSelectionsViewModel> sharingSelectionsViewModelProvider;

    private Provider<SharingViewModel> sharingViewModelProvider;

    private Provider<TextEditorViewModel> textEditorViewModelProvider;

    private Provider<TransferManagerViewModel> transferManagerViewModelProvider;

    private Provider<TransfersViewModel> transfersViewModelProvider;

    private Provider<UserProfileViewModel> userProfileViewModelProvider;

    private Provider<VideoBrowserViewModel> videoBrowserViewModelProvider;

    private Provider<WebShareViewModel> webShareViewModelProvider;

    private ViewModelCImpl(DaggerFileExplorer_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam);

    }

    private AppBrowserViewModel appBrowserViewModel() {
      return new AppBrowserViewModel(singletonC.mediaRepositoryProvider.get(), singletonC.selectionRepositoryProvider.get());
    }

    private AudioBrowserViewModel audioBrowserViewModel() {
      return new AudioBrowserViewModel(singletonC.mediaRepositoryProvider.get(), singletonC.selectionRepositoryProvider.get());
    }

    private BarcodeScannerViewModel barcodeScannerViewModel() {
      return new BarcodeScannerViewModel(singletonC.provideConnectionFactoryProvider.get(), singletonC.providePersistenceProvider.get());
    }

    private ChangelogViewModel changelogViewModel() {
      return new ChangelogViewModel(singletonC.extrasRepositoryProvider.get());
    }

    private ClientConnectionViewModel clientConnectionViewModel() {
      return new ClientConnectionViewModel(singletonC.provideConnectionFactoryProvider.get(), singletonC.providePersistenceProvider.get(), singletonC.clientRepositoryProvider.get());
    }

    private ClientPickerViewModel clientPickerViewModel() {
      return new ClientPickerViewModel(singletonC.transportRegistryProvider.get());
    }

    private ClientsViewModel clientsViewModel() {
      return new ClientsViewModel(singletonC.clientRepositoryProvider.get(), singletonC.onlineClientRepositoryProvider.get());
    }

    private CrashLogViewModel crashLogViewModel() {
      return new CrashLogViewModel(singletonC.extrasRepositoryProvider.get());
    }

    private FilesViewModel filesViewModel() {
      return new FilesViewModel(ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule), singletonC.fileRepositoryProvider.get(), singletonC.selectionRepositoryProvider.get());
    }

    private ImageBrowserViewModel imageBrowserViewModel() {
      return new ImageBrowserViewModel(singletonC.mediaRepositoryProvider.get(), singletonC.selectionRepositoryProvider.get());
    }

    private LicensesViewModel licensesViewModel() {
      return new LicensesViewModel(singletonC.extrasRepositoryProvider.get());
    }

    private ManualConnectionViewModel manualConnectionViewModel() {
      return new ManualConnectionViewModel(singletonC.provideConnectionFactoryProvider.get(), singletonC.providePersistenceProvider.get());
    }

    private PreparationViewModel preparationViewModel() {
      return new PreparationViewModel(ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule));
    }

    private PrepareIndexViewModel prepareIndexViewModel() {
      return new PrepareIndexViewModel(ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule), singletonC.selectionRepositoryProvider.get());
    }

    private ReceiverViewModel receiverViewModel() {
      return new ReceiverViewModel(singletonC.provideTransportSeatProvider.get());
    }

    private SharedTextsViewModel sharedTextsViewModel() {
      return new SharedTextsViewModel(ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule), singletonC.userDataRepositoryProvider.get(), singletonC.sharedTextRepositoryProvider.get());
    }

    private SharingSelectionViewModel sharingSelectionViewModel() {
      return new SharingSelectionViewModel(ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule), singletonC.selectionRepositoryProvider.get());
    }

    private SharingSelectionsViewModel sharingSelectionsViewModel() {
      return new SharingSelectionsViewModel(singletonC.selectionRepositoryProvider.get());
    }

    private SharingViewModel sharingViewModel() {
      return new SharingViewModel(singletonC.provideTransportSeatProvider.get(), singletonC.transferRepositoryProvider.get(), singletonC.fileRepositoryProvider.get());
    }

    private TransferManagerViewModel transferManagerViewModel() {
      return new TransferManagerViewModel(singletonC.transferTaskRepositoryProvider.get());
    }

    private TransfersViewModel transfersViewModel() {
      return new TransfersViewModel(ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule), singletonC.clientRepositoryProvider.get(), singletonC.sharedTextRepositoryProvider.get(), singletonC.taskRepositoryProvider.get(), singletonC.transferRepositoryProvider.get(), singletonC.webDataRepositoryProvider.get());
    }

    private UserProfileViewModel userProfileViewModel() {
      return new UserProfileViewModel(ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule), singletonC.userDataRepositoryProvider.get());
    }

    private VideoBrowserViewModel videoBrowserViewModel() {
      return new VideoBrowserViewModel(singletonC.mediaRepositoryProvider.get(), singletonC.selectionRepositoryProvider.get());
    }

    private WebShareViewModel webShareViewModel() {
      return new WebShareViewModel(ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule), singletonC.selectionRepositoryProvider.get(), singletonC.webDataRepositoryProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam) {
      this.appBrowserViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 0);
      this.audioBrowserViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 1);
      this.barcodeScannerViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 2);
      this.changelogViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 3);
      this.clientConnectionViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 4);
      this.clientPickerViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 5);
      this.clientsViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 6);
      this.contentBrowserViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 7);
      this.crashLogViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 8);
      this.filesViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 9);
      this.imageBrowserViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 10);
      this.licensesViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 11);
      this.manualConnectionViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 12);
      this.preparationViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 13);
      this.prepareIndexViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 14);
      this.receiverViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 15);
      this.sharedTextsViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 16);
      this.sharingSelectionViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 17);
      this.sharingSelectionsViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 18);
      this.sharingViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 19);
      this.textEditorViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 20);
      this.transferManagerViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 21);
      this.transfersViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 22);
      this.userProfileViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 23);
      this.videoBrowserViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 24);
      this.webShareViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 25);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(26).put("org.monora.uprotocol.client.android.fragment.content.AppBrowserViewModel", (Provider) appBrowserViewModelProvider).put("org.monora.uprotocol.client.android.fragment.content.AudioBrowserViewModel", (Provider) audioBrowserViewModelProvider).put("org.monora.uprotocol.client.android.fragment.pickclient.BarcodeScannerViewModel", (Provider) barcodeScannerViewModelProvider).put("org.monora.uprotocol.client.android.viewmodel.ChangelogViewModel", (Provider) changelogViewModelProvider).put("org.monora.uprotocol.client.android.viewmodel.ClientConnectionViewModel", (Provider) clientConnectionViewModelProvider).put("org.monora.uprotocol.client.android.viewmodel.ClientPickerViewModel", (Provider) clientPickerViewModelProvider).put("org.monora.uprotocol.client.android.viewmodel.ClientsViewModel", (Provider) clientsViewModelProvider).put("org.monora.uprotocol.client.android.fragment.ContentBrowserViewModel", (Provider) contentBrowserViewModelProvider).put("org.monora.uprotocol.client.android.viewmodel.CrashLogViewModel", (Provider) crashLogViewModelProvider).put("org.monora.uprotocol.client.android.viewmodel.FilesViewModel", (Provider) filesViewModelProvider).put("org.monora.uprotocol.client.android.fragment.content.ImageBrowserViewModel", (Provider) imageBrowserViewModelProvider).put("org.monora.uprotocol.client.android.viewmodel.LicensesViewModel", (Provider) licensesViewModelProvider).put("org.monora.uprotocol.client.android.fragment.pickclient.ManualConnectionViewModel", (Provider) manualConnectionViewModelProvider).put("org.monora.uprotocol.client.android.fragment.PreparationViewModel", (Provider) preparationViewModelProvider).put("org.monora.uprotocol.client.android.fragment.content.transfer.PrepareIndexViewModel", (Provider) prepareIndexViewModelProvider).put("org.monora.uprotocol.client.android.fragment.ReceiverViewModel", (Provider) receiverViewModelProvider).put("org.monora.uprotocol.client.android.viewmodel.SharedTextsViewModel", (Provider) sharedTextsViewModelProvider).put("org.monora.uprotocol.client.android.viewmodel.SharingSelectionViewModel", (Provider) sharingSelectionViewModelProvider).put("org.monora.uprotocol.client.android.fragment.SharingSelectionsViewModel", (Provider) sharingSelectionsViewModelProvider).put("org.monora.uprotocol.client.android.viewmodel.SharingViewModel", (Provider) sharingViewModelProvider).put("org.monora.uprotocol.client.android.fragment.TextEditorViewModel", (Provider) textEditorViewModelProvider).put("org.monora.uprotocol.client.android.viewmodel.TransferManagerViewModel", (Provider) transferManagerViewModelProvider).put("org.monora.uprotocol.client.android.viewmodel.TransfersViewModel", (Provider) transfersViewModelProvider).put("org.monora.uprotocol.client.android.viewmodel.UserProfileViewModel", (Provider) userProfileViewModelProvider).put("org.monora.uprotocol.client.android.fragment.content.VideoBrowserViewModel", (Provider) videoBrowserViewModelProvider).put("org.monora.uprotocol.client.android.fragment.content.transfer.WebShareViewModel", (Provider) webShareViewModelProvider).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerFileExplorer_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(DaggerFileExplorer_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, ViewModelCImpl viewModelCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // org.monora.uprotocol.client.android.fragment.content.AppBrowserViewModel 
          return (T) viewModelCImpl.appBrowserViewModel();

          case 1: // org.monora.uprotocol.client.android.fragment.content.AudioBrowserViewModel 
          return (T) viewModelCImpl.audioBrowserViewModel();

          case 2: // org.monora.uprotocol.client.android.fragment.pickclient.BarcodeScannerViewModel 
          return (T) viewModelCImpl.barcodeScannerViewModel();

          case 3: // org.monora.uprotocol.client.android.viewmodel.ChangelogViewModel 
          return (T) viewModelCImpl.changelogViewModel();

          case 4: // org.monora.uprotocol.client.android.viewmodel.ClientConnectionViewModel 
          return (T) viewModelCImpl.clientConnectionViewModel();

          case 5: // org.monora.uprotocol.client.android.viewmodel.ClientPickerViewModel 
          return (T) viewModelCImpl.clientPickerViewModel();

          case 6: // org.monora.uprotocol.client.android.viewmodel.ClientsViewModel 
          return (T) viewModelCImpl.clientsViewModel();

          case 7: // org.monora.uprotocol.client.android.fragment.ContentBrowserViewModel 
          return (T) new ContentBrowserViewModel();

          case 8: // org.monora.uprotocol.client.android.viewmodel.CrashLogViewModel 
          return (T) viewModelCImpl.crashLogViewModel();

          case 9: // org.monora.uprotocol.client.android.viewmodel.FilesViewModel 
          return (T) viewModelCImpl.filesViewModel();

          case 10: // org.monora.uprotocol.client.android.fragment.content.ImageBrowserViewModel 
          return (T) viewModelCImpl.imageBrowserViewModel();

          case 11: // org.monora.uprotocol.client.android.viewmodel.LicensesViewModel 
          return (T) viewModelCImpl.licensesViewModel();

          case 12: // org.monora.uprotocol.client.android.fragment.pickclient.ManualConnectionViewModel 
          return (T) viewModelCImpl.manualConnectionViewModel();

          case 13: // org.monora.uprotocol.client.android.fragment.PreparationViewModel 
          return (T) viewModelCImpl.preparationViewModel();

          case 14: // org.monora.uprotocol.client.android.fragment.content.transfer.PrepareIndexViewModel 
          return (T) viewModelCImpl.prepareIndexViewModel();

          case 15: // org.monora.uprotocol.client.android.fragment.ReceiverViewModel 
          return (T) viewModelCImpl.receiverViewModel();

          case 16: // org.monora.uprotocol.client.android.viewmodel.SharedTextsViewModel 
          return (T) viewModelCImpl.sharedTextsViewModel();

          case 17: // org.monora.uprotocol.client.android.viewmodel.SharingSelectionViewModel 
          return (T) viewModelCImpl.sharingSelectionViewModel();

          case 18: // org.monora.uprotocol.client.android.fragment.SharingSelectionsViewModel 
          return (T) viewModelCImpl.sharingSelectionsViewModel();

          case 19: // org.monora.uprotocol.client.android.viewmodel.SharingViewModel 
          return (T) viewModelCImpl.sharingViewModel();

          case 20: // org.monora.uprotocol.client.android.fragment.TextEditorViewModel 
          return (T) new TextEditorViewModel();

          case 21: // org.monora.uprotocol.client.android.viewmodel.TransferManagerViewModel 
          return (T) viewModelCImpl.transferManagerViewModel();

          case 22: // org.monora.uprotocol.client.android.viewmodel.TransfersViewModel 
          return (T) viewModelCImpl.transfersViewModel();

          case 23: // org.monora.uprotocol.client.android.viewmodel.UserProfileViewModel 
          return (T) viewModelCImpl.userProfileViewModel();

          case 24: // org.monora.uprotocol.client.android.fragment.content.VideoBrowserViewModel 
          return (T) viewModelCImpl.videoBrowserViewModel();

          case 25: // org.monora.uprotocol.client.android.fragment.content.transfer.WebShareViewModel 
          return (T) viewModelCImpl.webShareViewModel();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends FileExplorer_HiltComponents.ActivityRetainedC {
    private final DaggerFileExplorer_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(DaggerFileExplorer_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonC, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerFileExplorer_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(DaggerFileExplorer_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends FileExplorer_HiltComponents.ServiceC {
    private final DaggerFileExplorer_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerFileExplorer_HiltComponents_SingletonC singletonC,
        Service serviceParam) {
      this.singletonC = singletonC;


    }

    @Override
    public void injectBackgroundService(BackgroundService backgroundService) {
      injectBackgroundService2(backgroundService);
    }

    @Override
    public void injectTogglingTileService(TogglingTileService togglingTileService) {
      injectTogglingTileService2(togglingTileService);
    }

    private BackgroundService injectBackgroundService2(BackgroundService instance) {
      BackgroundService_MembersInjector.injectBackend(instance, singletonC.backendProvider.get());
      return instance;
    }

    private TogglingTileService injectTogglingTileService2(TogglingTileService instance) {
      TogglingTileService_MembersInjector.injectBackend(instance, singletonC.backendProvider.get());
      return instance;
    }
  }

  private static final class SwitchingProvider<T> implements Provider<T> {
    private final DaggerFileExplorer_HiltComponents_SingletonC singletonC;

    private final int id;

    SwitchingProvider(DaggerFileExplorer_HiltComponents_SingletonC singletonC, int id) {
      this.singletonC = singletonC;
      this.id = id;
    }

    @SuppressWarnings("unchecked")
    @Override
    public T get() {
      switch (id) {
        case 0: // org.monora.uprotocol.client.android.backend.Backend 
        return (T) singletonC.backend();

        case 1: // org.monora.uprotocol.client.android.backend.Services 
        return (T) singletonC.services2();

        case 2: // org.monora.uprotocol.client.android.util.NsdDaemon 
        return (T) singletonC.nsdDaemon();

        case 3: // org.monora.uprotocol.client.android.protocol.MainPersistenceProvider 
        return (T) singletonC.mainPersistenceProvider();

        case 4: // org.monora.uprotocol.client.android.data.ClientRepository 
        return (T) singletonC.clientRepository();

        case 5: // org.monora.uprotocol.client.android.database.AppDatabase 
        return (T) singletonC.appDatabase();

        case 6: // org.monora.uprotocol.client.android.data.UserDataRepository 
        return (T) singletonC.userDataRepository();

        case 7: // org.monora.uprotocol.client.android.data.TransferRepository 
        return (T) singletonC.transferRepository();

        case 8: // org.monora.uprotocol.client.android.data.FileRepository 
        return (T) singletonC.fileRepository2();

        case 9: // org.monora.uprotocol.client.android.protocol.MainConnectionFactory 
        return (T) singletonC.mainConnectionFactory();

        case 10: // org.monora.uprotocol.core.TransportSession 
        return (T) singletonC.transportSession();

        case 11: // org.monora.uprotocol.client.android.protocol.MainTransportSeat 
        return (T) singletonC.mainTransportSeat();

        case 12: // org.monora.uprotocol.client.android.data.SharedTextRepository 
        return (T) singletonC.sharedTextRepository();

        case 13: // org.monora.uprotocol.client.android.data.TaskRepository 
        return (T) singletonC.taskRepository();

        case 14: // org.monora.uprotocol.client.android.backend.TransportRegistry 
        return (T) singletonC.transportRegistry();

        case 15: // org.monora.uprotocol.client.android.data.WebDataRepository 
        return (T) singletonC.webDataRepository2();

        case 16: // @org.monora.uprotocol.client.android.di.WebShareServer com.yanzhenjie.andserver.Server 
        return (T) singletonC.webShareServerServer();

        case 17: // org.monora.uprotocol.client.android.data.TransferTaskRepository 
        return (T) singletonC.transferTaskRepository();

        case 18: // org.monora.uprotocol.client.android.data.MediaRepository 
        return (T) singletonC.mediaRepository();

        case 19: // org.monora.uprotocol.client.android.data.SelectionRepository 
        return (T) new SelectionRepository();

        case 20: // org.monora.uprotocol.client.android.data.ExtrasRepository 
        return (T) singletonC.extrasRepository();

        case 21: // org.monora.uprotocol.client.android.data.OnlineClientRepository 
        return (T) singletonC.onlineClientRepository();

        default: throw new AssertionError(id);
      }
    }
  }
}
