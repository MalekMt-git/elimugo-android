// Generated by Dagger (https://dagger.dev).
package org.monora.uprotocol.client.android.data;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import org.monora.uprotocol.client.android.content.AppStore;
import org.monora.uprotocol.client.android.content.AudioStore;
import org.monora.uprotocol.client.android.content.ImageStore;
import org.monora.uprotocol.client.android.content.VideoStore;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MediaRepository_Factory implements Factory<MediaRepository> {
  private final Provider<AppStore> appStoreProvider;

  private final Provider<AudioStore> audioStoreProvider;

  private final Provider<ImageStore> imageStoreProvider;

  private final Provider<VideoStore> videoStoreProvider;

  public MediaRepository_Factory(Provider<AppStore> appStoreProvider,
      Provider<AudioStore> audioStoreProvider, Provider<ImageStore> imageStoreProvider,
      Provider<VideoStore> videoStoreProvider) {
    this.appStoreProvider = appStoreProvider;
    this.audioStoreProvider = audioStoreProvider;
    this.imageStoreProvider = imageStoreProvider;
    this.videoStoreProvider = videoStoreProvider;
  }

  @Override
  public MediaRepository get() {
    return newInstance(appStoreProvider.get(), audioStoreProvider.get(), imageStoreProvider.get(), videoStoreProvider.get());
  }

  public static MediaRepository_Factory create(Provider<AppStore> appStoreProvider,
      Provider<AudioStore> audioStoreProvider, Provider<ImageStore> imageStoreProvider,
      Provider<VideoStore> videoStoreProvider) {
    return new MediaRepository_Factory(appStoreProvider, audioStoreProvider, imageStoreProvider, videoStoreProvider);
  }

  public static MediaRepository newInstance(AppStore appStore, AudioStore audioStore,
      ImageStore imageStore, VideoStore videoStore) {
    return new MediaRepository(appStore, audioStore, imageStore, videoStore);
  }
}
