// Generated by Dagger (https://dagger.dev).
package org.monora.uprotocol.client.android.fragment.content.transfer;

import android.content.Context;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import org.monora.uprotocol.client.android.data.SelectionRepository;
import org.monora.uprotocol.client.android.data.WebDataRepository;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class WebShareViewModel_Factory implements Factory<WebShareViewModel> {
  private final Provider<Context> contextProvider;

  private final Provider<SelectionRepository> selectionRepositoryProvider;

  private final Provider<WebDataRepository> webDataRepositoryProvider;

  public WebShareViewModel_Factory(Provider<Context> contextProvider,
      Provider<SelectionRepository> selectionRepositoryProvider,
      Provider<WebDataRepository> webDataRepositoryProvider) {
    this.contextProvider = contextProvider;
    this.selectionRepositoryProvider = selectionRepositoryProvider;
    this.webDataRepositoryProvider = webDataRepositoryProvider;
  }

  @Override
  public WebShareViewModel get() {
    return newInstance(contextProvider.get(), selectionRepositoryProvider.get(), webDataRepositoryProvider.get());
  }

  public static WebShareViewModel_Factory create(Provider<Context> contextProvider,
      Provider<SelectionRepository> selectionRepositoryProvider,
      Provider<WebDataRepository> webDataRepositoryProvider) {
    return new WebShareViewModel_Factory(contextProvider, selectionRepositoryProvider, webDataRepositoryProvider);
  }

  public static WebShareViewModel newInstance(Context context,
      SelectionRepository selectionRepository, WebDataRepository webDataRepository) {
    return new WebShareViewModel(context, selectionRepository, webDataRepository);
  }
}
