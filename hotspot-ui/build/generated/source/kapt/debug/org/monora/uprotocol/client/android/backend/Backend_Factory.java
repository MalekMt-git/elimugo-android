// Generated by Dagger (https://dagger.dev).
package org.monora.uprotocol.client.android.backend;

import android.content.Context;
import dagger.Lazy;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class Backend_Factory implements Factory<Backend> {
  private final Provider<Context> contextProvider;

  private final Provider<Services> servicesProvider;

  public Backend_Factory(Provider<Context> contextProvider, Provider<Services> servicesProvider) {
    this.contextProvider = contextProvider;
    this.servicesProvider = servicesProvider;
  }

  @Override
  public Backend get() {
    return newInstance(contextProvider.get(), DoubleCheck.lazy(servicesProvider));
  }

  public static Backend_Factory create(Provider<Context> contextProvider,
      Provider<Services> servicesProvider) {
    return new Backend_Factory(contextProvider, servicesProvider);
  }

  public static Backend newInstance(Context context, Lazy<Services> services) {
    return new Backend(context, services);
  }
}
