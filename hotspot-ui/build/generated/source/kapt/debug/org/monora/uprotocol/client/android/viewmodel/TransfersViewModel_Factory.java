// Generated by Dagger (https://dagger.dev).
package org.monora.uprotocol.client.android.viewmodel;

import android.content.Context;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import org.monora.uprotocol.client.android.data.ClientRepository;
import org.monora.uprotocol.client.android.data.SharedTextRepository;
import org.monora.uprotocol.client.android.data.TaskRepository;
import org.monora.uprotocol.client.android.data.TransferRepository;
import org.monora.uprotocol.client.android.data.WebDataRepository;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class TransfersViewModel_Factory implements Factory<TransfersViewModel> {
  private final Provider<Context> contextProvider;

  private final Provider<ClientRepository> clientRepositoryProvider;

  private final Provider<SharedTextRepository> sharedTextRepositoryProvider;

  private final Provider<TaskRepository> taskRepositoryProvider;

  private final Provider<TransferRepository> transferRepositoryProvider;

  private final Provider<WebDataRepository> webDataRepositoryProvider;

  public TransfersViewModel_Factory(Provider<Context> contextProvider,
      Provider<ClientRepository> clientRepositoryProvider,
      Provider<SharedTextRepository> sharedTextRepositoryProvider,
      Provider<TaskRepository> taskRepositoryProvider,
      Provider<TransferRepository> transferRepositoryProvider,
      Provider<WebDataRepository> webDataRepositoryProvider) {
    this.contextProvider = contextProvider;
    this.clientRepositoryProvider = clientRepositoryProvider;
    this.sharedTextRepositoryProvider = sharedTextRepositoryProvider;
    this.taskRepositoryProvider = taskRepositoryProvider;
    this.transferRepositoryProvider = transferRepositoryProvider;
    this.webDataRepositoryProvider = webDataRepositoryProvider;
  }

  @Override
  public TransfersViewModel get() {
    return newInstance(contextProvider.get(), clientRepositoryProvider.get(), sharedTextRepositoryProvider.get(), taskRepositoryProvider.get(), transferRepositoryProvider.get(), webDataRepositoryProvider.get());
  }

  public static TransfersViewModel_Factory create(Provider<Context> contextProvider,
      Provider<ClientRepository> clientRepositoryProvider,
      Provider<SharedTextRepository> sharedTextRepositoryProvider,
      Provider<TaskRepository> taskRepositoryProvider,
      Provider<TransferRepository> transferRepositoryProvider,
      Provider<WebDataRepository> webDataRepositoryProvider) {
    return new TransfersViewModel_Factory(contextProvider, clientRepositoryProvider, sharedTextRepositoryProvider, taskRepositoryProvider, transferRepositoryProvider, webDataRepositoryProvider);
  }

  public static TransfersViewModel newInstance(Context context, ClientRepository clientRepository,
      SharedTextRepository sharedTextRepository, TaskRepository taskRepository,
      TransferRepository transferRepository, WebDataRepository webDataRepository) {
    return new TransfersViewModel(context, clientRepository, sharedTextRepository, taskRepository, transferRepository, webDataRepository);
  }
}
