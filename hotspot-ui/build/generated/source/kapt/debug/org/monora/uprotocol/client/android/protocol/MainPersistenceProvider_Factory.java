// Generated by Dagger (https://dagger.dev).
package org.monora.uprotocol.client.android.protocol;

import android.content.Context;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import org.monora.uprotocol.client.android.data.ClientRepository;
import org.monora.uprotocol.client.android.data.TransferRepository;
import org.monora.uprotocol.client.android.data.UserDataRepository;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainPersistenceProvider_Factory implements Factory<MainPersistenceProvider> {
  private final Provider<Context> contextProvider;

  private final Provider<ClientRepository> clientRepositoryProvider;

  private final Provider<UserDataRepository> userDataRepositoryProvider;

  private final Provider<TransferRepository> transferRepositoryProvider;

  public MainPersistenceProvider_Factory(Provider<Context> contextProvider,
      Provider<ClientRepository> clientRepositoryProvider,
      Provider<UserDataRepository> userDataRepositoryProvider,
      Provider<TransferRepository> transferRepositoryProvider) {
    this.contextProvider = contextProvider;
    this.clientRepositoryProvider = clientRepositoryProvider;
    this.userDataRepositoryProvider = userDataRepositoryProvider;
    this.transferRepositoryProvider = transferRepositoryProvider;
  }

  @Override
  public MainPersistenceProvider get() {
    return newInstance(contextProvider.get(), clientRepositoryProvider.get(), userDataRepositoryProvider.get(), transferRepositoryProvider.get());
  }

  public static MainPersistenceProvider_Factory create(Provider<Context> contextProvider,
      Provider<ClientRepository> clientRepositoryProvider,
      Provider<UserDataRepository> userDataRepositoryProvider,
      Provider<TransferRepository> transferRepositoryProvider) {
    return new MainPersistenceProvider_Factory(contextProvider, clientRepositoryProvider, userDataRepositoryProvider, transferRepositoryProvider);
  }

  public static MainPersistenceProvider newInstance(Context context,
      ClientRepository clientRepository, UserDataRepository userDataRepository,
      TransferRepository transferRepository) {
    return new MainPersistenceProvider(context, clientRepository, userDataRepository, transferRepository);
  }
}
