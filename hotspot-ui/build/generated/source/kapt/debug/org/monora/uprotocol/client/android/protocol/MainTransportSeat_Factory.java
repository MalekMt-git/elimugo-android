// Generated by Dagger (https://dagger.dev).
package org.monora.uprotocol.client.android.protocol;

import android.content.Context;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import org.monora.uprotocol.client.android.backend.Backend;
import org.monora.uprotocol.client.android.backend.TransportRegistry;
import org.monora.uprotocol.client.android.data.FileRepository;
import org.monora.uprotocol.client.android.data.SharedTextRepository;
import org.monora.uprotocol.client.android.data.TaskRepository;
import org.monora.uprotocol.client.android.data.TransferRepository;
import org.monora.uprotocol.core.persistence.PersistenceProvider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainTransportSeat_Factory implements Factory<MainTransportSeat> {
  private final Provider<Context> contextProvider;

  private final Provider<Backend> backendProvider;

  private final Provider<FileRepository> fileRepositoryProvider;

  private final Provider<PersistenceProvider> persistenceProvider;

  private final Provider<SharedTextRepository> sharedTextRepositoryProvider;

  private final Provider<TaskRepository> taskRepositoryProvider;

  private final Provider<TransferRepository> transferRepositoryProvider;

  private final Provider<TransportRegistry> transportRegistryProvider;

  public MainTransportSeat_Factory(Provider<Context> contextProvider,
      Provider<Backend> backendProvider, Provider<FileRepository> fileRepositoryProvider,
      Provider<PersistenceProvider> persistenceProvider,
      Provider<SharedTextRepository> sharedTextRepositoryProvider,
      Provider<TaskRepository> taskRepositoryProvider,
      Provider<TransferRepository> transferRepositoryProvider,
      Provider<TransportRegistry> transportRegistryProvider) {
    this.contextProvider = contextProvider;
    this.backendProvider = backendProvider;
    this.fileRepositoryProvider = fileRepositoryProvider;
    this.persistenceProvider = persistenceProvider;
    this.sharedTextRepositoryProvider = sharedTextRepositoryProvider;
    this.taskRepositoryProvider = taskRepositoryProvider;
    this.transferRepositoryProvider = transferRepositoryProvider;
    this.transportRegistryProvider = transportRegistryProvider;
  }

  @Override
  public MainTransportSeat get() {
    return newInstance(contextProvider.get(), backendProvider.get(), fileRepositoryProvider.get(), persistenceProvider.get(), sharedTextRepositoryProvider.get(), taskRepositoryProvider.get(), transferRepositoryProvider.get(), transportRegistryProvider.get());
  }

  public static MainTransportSeat_Factory create(Provider<Context> contextProvider,
      Provider<Backend> backendProvider, Provider<FileRepository> fileRepositoryProvider,
      Provider<PersistenceProvider> persistenceProvider,
      Provider<SharedTextRepository> sharedTextRepositoryProvider,
      Provider<TaskRepository> taskRepositoryProvider,
      Provider<TransferRepository> transferRepositoryProvider,
      Provider<TransportRegistry> transportRegistryProvider) {
    return new MainTransportSeat_Factory(contextProvider, backendProvider, fileRepositoryProvider, persistenceProvider, sharedTextRepositoryProvider, taskRepositoryProvider, transferRepositoryProvider, transportRegistryProvider);
  }

  public static MainTransportSeat newInstance(Context context, Backend backend,
      FileRepository fileRepository, PersistenceProvider persistenceProvider,
      SharedTextRepository sharedTextRepository, TaskRepository taskRepository,
      TransferRepository transferRepository, TransportRegistry transportRegistry) {
    return new MainTransportSeat(context, backend, fileRepository, persistenceProvider, sharedTextRepository, taskRepository, transferRepository, transportRegistry);
  }
}
