// Generated by Dagger (https://dagger.dev).
package org.monora.uprotocol.client.android.viewmodel;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import org.monora.uprotocol.client.android.data.FileRepository;
import org.monora.uprotocol.client.android.data.TransferRepository;
import org.monora.uprotocol.core.TransportSeat;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SharingViewModel_Factory implements Factory<SharingViewModel> {
  private final Provider<TransportSeat> transportSeatProvider;

  private final Provider<TransferRepository> transferRepositoryProvider;

  private final Provider<FileRepository> fileRepositoryProvider;

  public SharingViewModel_Factory(Provider<TransportSeat> transportSeatProvider,
      Provider<TransferRepository> transferRepositoryProvider,
      Provider<FileRepository> fileRepositoryProvider) {
    this.transportSeatProvider = transportSeatProvider;
    this.transferRepositoryProvider = transferRepositoryProvider;
    this.fileRepositoryProvider = fileRepositoryProvider;
  }

  @Override
  public SharingViewModel get() {
    return newInstance(transportSeatProvider.get(), transferRepositoryProvider.get(), fileRepositoryProvider.get());
  }

  public static SharingViewModel_Factory create(Provider<TransportSeat> transportSeatProvider,
      Provider<TransferRepository> transferRepositoryProvider,
      Provider<FileRepository> fileRepositoryProvider) {
    return new SharingViewModel_Factory(transportSeatProvider, transferRepositoryProvider, fileRepositoryProvider);
  }

  public static SharingViewModel newInstance(TransportSeat transportSeat,
      TransferRepository transferRepository, FileRepository fileRepository) {
    return new SharingViewModel(transportSeat, transferRepository, fileRepository);
  }
}
