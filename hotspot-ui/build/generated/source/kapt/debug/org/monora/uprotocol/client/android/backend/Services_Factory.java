// Generated by Dagger (https://dagger.dev).
package org.monora.uprotocol.client.android.backend;

import android.content.Context;
import com.yanzhenjie.andserver.Server;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import org.monora.uprotocol.client.android.data.WebDataRepository;
import org.monora.uprotocol.client.android.util.NsdDaemon;
import org.monora.uprotocol.core.TransportSession;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class Services_Factory implements Factory<Services> {
  private final Provider<Context> contextProvider;

  private final Provider<NsdDaemon> nsdDaemonProvider;

  private final Provider<TransportSession> transportSessionProvider;

  private final Provider<WebDataRepository> webDataRepositoryProvider;

  private final Provider<Server> webShareServerProvider;

  public Services_Factory(Provider<Context> contextProvider, Provider<NsdDaemon> nsdDaemonProvider,
      Provider<TransportSession> transportSessionProvider,
      Provider<WebDataRepository> webDataRepositoryProvider,
      Provider<Server> webShareServerProvider) {
    this.contextProvider = contextProvider;
    this.nsdDaemonProvider = nsdDaemonProvider;
    this.transportSessionProvider = transportSessionProvider;
    this.webDataRepositoryProvider = webDataRepositoryProvider;
    this.webShareServerProvider = webShareServerProvider;
  }

  @Override
  public Services get() {
    return newInstance(contextProvider.get(), nsdDaemonProvider.get(), transportSessionProvider.get(), webDataRepositoryProvider.get(), webShareServerProvider.get());
  }

  public static Services_Factory create(Provider<Context> contextProvider,
      Provider<NsdDaemon> nsdDaemonProvider, Provider<TransportSession> transportSessionProvider,
      Provider<WebDataRepository> webDataRepositoryProvider,
      Provider<Server> webShareServerProvider) {
    return new Services_Factory(contextProvider, nsdDaemonProvider, transportSessionProvider, webDataRepositoryProvider, webShareServerProvider);
  }

  public static Services newInstance(Context context, NsdDaemon nsdDaemon,
      TransportSession transportSession, WebDataRepository webDataRepository,
      Server webShareServer) {
    return new Services(context, nsdDaemon, transportSession, webDataRepository, webShareServer);
  }
}
