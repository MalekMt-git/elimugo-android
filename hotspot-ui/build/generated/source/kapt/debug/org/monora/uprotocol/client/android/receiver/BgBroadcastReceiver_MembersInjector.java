// Generated by Dagger (https://dagger.dev).
package org.monora.uprotocol.client.android.receiver;

import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;
import org.monora.uprotocol.client.android.backend.Backend;
import org.monora.uprotocol.client.android.data.ClientRepository;
import org.monora.uprotocol.client.android.data.TransferRepository;
import org.monora.uprotocol.client.android.data.TransferTaskRepository;
import org.monora.uprotocol.core.TransportSeat;
import org.monora.uprotocol.core.persistence.PersistenceProvider;
import org.monora.uprotocol.core.protocol.ConnectionFactory;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class BgBroadcastReceiver_MembersInjector implements MembersInjector<BgBroadcastReceiver> {
  private final Provider<Backend> backendProvider;

  private final Provider<ClientRepository> clientRepositoryProvider;

  private final Provider<ConnectionFactory> connectionFactoryProvider;

  private final Provider<PersistenceProvider> persistenceProvider;

  private final Provider<TransferRepository> transferRepositoryProvider;

  private final Provider<TransferTaskRepository> transferTaskRepositoryProvider;

  private final Provider<TransportSeat> transportSeatProvider;

  public BgBroadcastReceiver_MembersInjector(Provider<Backend> backendProvider,
      Provider<ClientRepository> clientRepositoryProvider,
      Provider<ConnectionFactory> connectionFactoryProvider,
      Provider<PersistenceProvider> persistenceProvider,
      Provider<TransferRepository> transferRepositoryProvider,
      Provider<TransferTaskRepository> transferTaskRepositoryProvider,
      Provider<TransportSeat> transportSeatProvider) {
    this.backendProvider = backendProvider;
    this.clientRepositoryProvider = clientRepositoryProvider;
    this.connectionFactoryProvider = connectionFactoryProvider;
    this.persistenceProvider = persistenceProvider;
    this.transferRepositoryProvider = transferRepositoryProvider;
    this.transferTaskRepositoryProvider = transferTaskRepositoryProvider;
    this.transportSeatProvider = transportSeatProvider;
  }

  public static MembersInjector<BgBroadcastReceiver> create(Provider<Backend> backendProvider,
      Provider<ClientRepository> clientRepositoryProvider,
      Provider<ConnectionFactory> connectionFactoryProvider,
      Provider<PersistenceProvider> persistenceProvider,
      Provider<TransferRepository> transferRepositoryProvider,
      Provider<TransferTaskRepository> transferTaskRepositoryProvider,
      Provider<TransportSeat> transportSeatProvider) {
    return new BgBroadcastReceiver_MembersInjector(backendProvider, clientRepositoryProvider, connectionFactoryProvider, persistenceProvider, transferRepositoryProvider, transferTaskRepositoryProvider, transportSeatProvider);
  }

  @Override
  public void injectMembers(BgBroadcastReceiver instance) {
    injectBackend(instance, backendProvider.get());
    injectClientRepository(instance, clientRepositoryProvider.get());
    injectConnectionFactory(instance, connectionFactoryProvider.get());
    injectPersistenceProvider(instance, persistenceProvider.get());
    injectTransferRepository(instance, transferRepositoryProvider.get());
    injectTransferTaskRepository(instance, transferTaskRepositoryProvider.get());
    injectTransportSeat(instance, transportSeatProvider.get());
  }

  @InjectedFieldSignature("org.monora.uprotocol.client.android.receiver.BgBroadcastReceiver.backend")
  public static void injectBackend(BgBroadcastReceiver instance, Backend backend) {
    instance.backend = backend;
  }

  @InjectedFieldSignature("org.monora.uprotocol.client.android.receiver.BgBroadcastReceiver.clientRepository")
  public static void injectClientRepository(BgBroadcastReceiver instance,
      ClientRepository clientRepository) {
    instance.clientRepository = clientRepository;
  }

  @InjectedFieldSignature("org.monora.uprotocol.client.android.receiver.BgBroadcastReceiver.connectionFactory")
  public static void injectConnectionFactory(BgBroadcastReceiver instance,
      ConnectionFactory connectionFactory) {
    instance.connectionFactory = connectionFactory;
  }

  @InjectedFieldSignature("org.monora.uprotocol.client.android.receiver.BgBroadcastReceiver.persistenceProvider")
  public static void injectPersistenceProvider(BgBroadcastReceiver instance,
      PersistenceProvider persistenceProvider) {
    instance.persistenceProvider = persistenceProvider;
  }

  @InjectedFieldSignature("org.monora.uprotocol.client.android.receiver.BgBroadcastReceiver.transferRepository")
  public static void injectTransferRepository(BgBroadcastReceiver instance,
      TransferRepository transferRepository) {
    instance.transferRepository = transferRepository;
  }

  @InjectedFieldSignature("org.monora.uprotocol.client.android.receiver.BgBroadcastReceiver.transferTaskRepository")
  public static void injectTransferTaskRepository(BgBroadcastReceiver instance,
      TransferTaskRepository transferTaskRepository) {
    instance.transferTaskRepository = transferTaskRepository;
  }

  @InjectedFieldSignature("org.monora.uprotocol.client.android.receiver.BgBroadcastReceiver.transportSeat")
  public static void injectTransportSeat(BgBroadcastReceiver instance,
      TransportSeat transportSeat) {
    instance.transportSeat = transportSeat;
  }
}
