// Generated by data binding compiler. Do not edit!
package org.monora.uprotocol.client.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.Barrier;
import androidx.databinding.Bindable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.progressindicator.CircularProgressIndicator;
import java.lang.Deprecated;
import java.lang.Object;
import org.monora.uprotocol.client.android.R;
import org.monora.uprotocol.client.android.viewmodel.content.ClientContentViewModel;
import org.monora.uprotocol.client.android.viewmodel.content.TransferDetailContentViewModel;
import org.monora.uprotocol.client.android.viewmodel.content.TransferStateContentViewModel;

public abstract class LayoutTransferDetailsBinding extends ViewDataBinding {
  @NonNull
  public final ImageView image;

  @NonNull
  public final ImageView imageView4;

  @NonNull
  public final MaterialButton openDirectoryButton;

  @NonNull
  public final ImageView optionsButton;

  @NonNull
  public final TextView percentageSignPlaceholder;

  @NonNull
  public final CircularProgressIndicator progressBar;

  @NonNull
  public final TextView progressText;

  @NonNull
  public final Button rejectButton;

  @NonNull
  public final ImageView showFilesButton;

  @NonNull
  public final TextView speedText;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final Barrier targetBottomBarrier;

  @NonNull
  public final TextView text;

  @NonNull
  public final TextView textView15;

  @NonNull
  public final FloatingActionButton toggleButton;

  @NonNull
  public final TextView transferTypeText;

  @NonNull
  public final TextView waitingApprovalText;

  @Bindable
  protected ClientContentViewModel mClientViewModel;

  @Bindable
  protected TransferDetailContentViewModel mTransferViewModel;

  @Bindable
  protected TransferStateContentViewModel mStateViewModel;

  protected LayoutTransferDetailsBinding(Object _bindingComponent, View _root, int _localFieldCount,
      ImageView image, ImageView imageView4, MaterialButton openDirectoryButton,
      ImageView optionsButton, TextView percentageSignPlaceholder,
      CircularProgressIndicator progressBar, TextView progressText, Button rejectButton,
      ImageView showFilesButton, TextView speedText, Barrier targetBottomBarrier, TextView text,
      TextView textView15, FloatingActionButton toggleButton, TextView transferTypeText,
      TextView waitingApprovalText) {
    super(_bindingComponent, _root, _localFieldCount);
    this.image = image;
    this.imageView4 = imageView4;
    this.openDirectoryButton = openDirectoryButton;
    this.optionsButton = optionsButton;
    this.percentageSignPlaceholder = percentageSignPlaceholder;
    this.progressBar = progressBar;
    this.progressText = progressText;
    this.rejectButton = rejectButton;
    this.showFilesButton = showFilesButton;
    this.speedText = speedText;
    this.targetBottomBarrier = targetBottomBarrier;
    this.text = text;
    this.textView15 = textView15;
    this.toggleButton = toggleButton;
    this.transferTypeText = transferTypeText;
    this.waitingApprovalText = waitingApprovalText;
  }

  public abstract void setClientViewModel(@Nullable ClientContentViewModel clientViewModel);

  @Nullable
  public ClientContentViewModel getClientViewModel() {
    return mClientViewModel;
  }

  public abstract void setTransferViewModel(
      @Nullable TransferDetailContentViewModel transferViewModel);

  @Nullable
  public TransferDetailContentViewModel getTransferViewModel() {
    return mTransferViewModel;
  }

  public abstract void setStateViewModel(@Nullable TransferStateContentViewModel stateViewModel);

  @Nullable
  public TransferStateContentViewModel getStateViewModel() {
    return mStateViewModel;
  }

  @NonNull
  public static LayoutTransferDetailsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.layout_transfer_details, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static LayoutTransferDetailsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<LayoutTransferDetailsBinding>inflateInternal(inflater, R.layout.layout_transfer_details, root, attachToRoot, component);
  }

  @NonNull
  public static LayoutTransferDetailsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.layout_transfer_details, null, false, component)
   */
  @NonNull
  @Deprecated
  public static LayoutTransferDetailsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<LayoutTransferDetailsBinding>inflateInternal(inflater, R.layout.layout_transfer_details, null, false, component);
  }

  public static LayoutTransferDetailsBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static LayoutTransferDetailsBinding bind(@NonNull View view, @Nullable Object component) {
    return (LayoutTransferDetailsBinding)bind(component, view, R.layout.layout_transfer_details);
  }
}
