// Generated by data binding compiler. Do not edit!
package org.monora.uprotocol.client.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.Barrier;
import androidx.constraintlayout.widget.Guideline;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import androidx.recyclerview.widget.RecyclerView;
import com.google.android.material.button.MaterialButton;
import java.lang.Deprecated;
import java.lang.Object;
import org.monora.uprotocol.client.android.R;

public abstract class LayoutSharingBinding extends ViewDataBinding {
  @NonNull
  public final View buttonsDivider;

  @NonNull
  public final Barrier buttonsTopBarrier;

  @NonNull
  public final Guideline guidelineEnd;

  @NonNull
  public final Guideline guidelineStart;

  @NonNull
  public final CoordinatorLayout listParent;

  @NonNull
  public final RecyclerView recyclerView;

  @NonNull
  public final MaterialButton sendButton;

  @NonNull
  public final MaterialButton shareOnWeb;

  protected LayoutSharingBinding(Object _bindingComponent, View _root, int _localFieldCount,
      View buttonsDivider, Barrier buttonsTopBarrier, Guideline guidelineEnd,
      Guideline guidelineStart, CoordinatorLayout listParent, RecyclerView recyclerView,
      MaterialButton sendButton, MaterialButton shareOnWeb) {
    super(_bindingComponent, _root, _localFieldCount);
    this.buttonsDivider = buttonsDivider;
    this.buttonsTopBarrier = buttonsTopBarrier;
    this.guidelineEnd = guidelineEnd;
    this.guidelineStart = guidelineStart;
    this.listParent = listParent;
    this.recyclerView = recyclerView;
    this.sendButton = sendButton;
    this.shareOnWeb = shareOnWeb;
  }

  @NonNull
  public static LayoutSharingBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.layout_sharing, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static LayoutSharingBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<LayoutSharingBinding>inflateInternal(inflater, R.layout.layout_sharing, root, attachToRoot, component);
  }

  @NonNull
  public static LayoutSharingBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.layout_sharing, null, false, component)
   */
  @NonNull
  @Deprecated
  public static LayoutSharingBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<LayoutSharingBinding>inflateInternal(inflater, R.layout.layout_sharing, null, false, component);
  }

  public static LayoutSharingBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static LayoutSharingBinding bind(@NonNull View view, @Nullable Object component) {
    return (LayoutSharingBinding)bind(component, view, R.layout.layout_sharing);
  }
}
